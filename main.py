
import os
import random
import csv
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, CallbackContext

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MUSIC_FOLDER = os.path.join(BASE_DIR, 'music')
DATA_FOLDER = os.path.join(BASE_DIR, 'data')
DATA_FILE = os.path.join(DATA_FOLDER, 'data.csv')

os.makedirs(DATA_FOLDER, exist_ok=True)

user_data = {}


def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username if update.message.from_user.username else user_id
    user_data[user_id] = {'last_tracks': [], 'location': None, 'activity': None, 'track_message_id': None,
                          'button_message_id': None, 'username': username, 'state': 'awaiting_name'}

    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç <b>Resonance</b>, –º—ã —Å–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—É—é –º—É–∑—ã–∫—É –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π –≤ –≥–æ—Ä–æ–¥–µ. ‚ú®üí´\n–°–∫–æ—Ä–æ —É –Ω–∞—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∞ –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ telegram! ‚úàÔ∏è', parse_mode="html")
    update.message.reply_text('–î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üëÄ\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:')


def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    state = user_data[user_id].get('state', '')

    if state == 'awaiting_name':
        handle_name(update, context)
    elif state == 'awaiting_location':
        handle_location(update, context)
    elif state == 'awaiting_activity':
        handle_activity(update, context)
    else:
        update.message.reply_text('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ "–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.')


def handle_name(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    name = update.message.text
    user_data[user_id]['name'] = name
    user_data[user_id]['state'] = 'awaiting_menu'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è-–º–µ–Ω—é
    send_menu(update, context, f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! ü´∂\n–ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –ø–æ–¥–±–æ—Ä–∞ –º—É–∑—ã–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–π üé∂')


def send_menu(update: Update, context: CallbackContext, text: str) -> None:
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data='start')],
        [InlineKeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ", callback_data='about')],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='support')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(text, reply_markup=reply_markup)


def handle_location(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    location = update.message.text
    user_data[user_id]['location'] = location
    user_data[user_id]['state'] = 'ready'  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ 'ready'

    # –£–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å
    send_next_track_button(update, context)


def handle_activity(update: Update, context: CallbackContext) -> None:
    # –£–¥–∞–ª—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    pass


def send_next_track_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = update.effective_chat.id

    if user_id in user_data and user_data[user_id]['button_message_id']:
        try:
            context.bot.delete_message(chat_id=user_id, message_id=user_data[user_id]['button_message_id'])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")

    keyboard = [[InlineKeyboardButton("‚è©", callback_data='next_track')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = query.message.reply_text('üåä –ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å üåä', reply_markup=reply_markup)
    user_data[user_id]['button_message_id'] = message.message_id


def send_random_track(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    last_tracks = user_data[user_id]['last_tracks']
    available_tracks = [i for i in range(1, 6) if i not in last_tracks]

    if not available_tracks:
        available_tracks = list(range(1, 6))
        last_tracks.clear()

    track_number = random.choice(available_tracks)
    last_tracks.append(track_number)
    if len(last_tracks) > 3:
        last_tracks.pop(0)

    location = user_data[user_id]['location']

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏
    location_mapping = {
        '–î–æ–º': 'home',
        '–ü–∞—Ä–∫': 'park',
        '–ì–æ—Ä–æ–¥': 'city'
    }

    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    location_english = location_mapping.get(location)

    if location_english:
        track_path = os.path.join(MUSIC_FOLDER, location_english.lower(), f'{track_number}.mp3')

        if os.path.exists(track_path):
            if user_id in user_data and user_data[user_id]['track_message_id']:
                try:
                    context.bot.delete_message(chat_id=update.message.chat_id,
                                               message_id=user_data[user_id]['track_message_id'])
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            with open(track_path, 'rb') as voice_file:
                sent_message = update.message.reply_voice(voice=InputFile(voice_file))

            user_data[user_id]['track_message_id'] = sent_message.message_id

            if user_id in user_data and user_data[user_id]['button_message_id']:
                try:
                    context.bot.delete_message(chat_id=update.message.chat_id,
                                               message_id=user_data[user_id]['button_message_id'])
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")

            keyboard = [
                [
                    InlineKeyboardButton("üëç", callback_data=f'like,{track_number}'),
                    InlineKeyboardButton("üëé", callback_data=f'dislike,{track_number}'),
                    InlineKeyboardButton("‚è©", callback_data='next_track')
                ],
                [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            message = update.message.reply_text('üåä –ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å üåä', reply_markup=reply_markup)
            user_data[user_id]['button_message_id'] = message.message_id
        else:
            update.message.reply_text('–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    else:
        update.message.reply_text(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')


def button_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    user_id = query.message.chat.id
    data = query.data.split(',')
    action = data[0]

    if action == 'next_track':
        send_random_track(query, context)

    elif action == 'start':
        user_data[user_id]['state'] = 'awaiting_location'
        keyboard = [
            [InlineKeyboardButton("üè°", callback_data='location,–î–æ–º'),
             InlineKeyboardButton("üèôÔ∏è", callback_data='location,–ì–æ—Ä–æ–¥'),
             InlineKeyboardButton("üèûÔ∏è", callback_data='location,–ü–∞—Ä–∫')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text('–ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?', reply_markup=reply_markup)

    elif action == 'about':
        query.message.edit_text(
            'Resonance ‚Äì MVP-–≤–µ—Ä—Å–∏—è –±—É–¥—É—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–∞—É–Ω–¥—Å–∫–µ–π–ø–∏–Ω–≥–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –≥–æ—Ä–æ–¥–∞, –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: http://resonance-app.tilda.ws \n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data='start')],
                [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='support')]
            ])
        )
    elif action == 'support':
        query.message.edit_text(
            '–ß—Ç–æ–±—ã –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∞—Å—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –º–æ–∂–µ—Ç–µ –Ω–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–æ–Ω–∞—Ç–æ–º –ø–æ —Å—Å—ã–ª–∫–µ: https://www.tinkoff.ru/cf/8npR27exLyM \n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data='start')],
                [InlineKeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ", callback_data='about')]
            ])
        )

    elif action == 'menu':
        send_menu(query, context, '–ù—É —á—Ç–æ, –ø–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –†–µ–∑–æ–Ω–∞–Ω—Å?')
    elif action == 'location':
        location = data[1]
        user_data[user_id]['location'] = location
        user_data[user_id]['state'] = 'ready'
        name = user_data[user_id]['name']
        query.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ, {name}! ‚ú®\n–¢–µ–ø–µ—Ä—å –º—ã –≥–æ—Ç–æ–≤—ã...')
        send_next_track_button(update, context)
    else:
        track_number = int(data[1])
        username = user_data[user_id]['username']
        save_user_feedback(username, track_number, action, user_id)

        if action == 'like':
            new_text = 'üî•‚ù§Ô∏è‚Äçüî• –ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å ‚ù§Ô∏è‚Äçüî•üî•'
        elif action == 'dislike':
            new_text = '‚ùÑÔ∏èü•∂ –ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å ü•∂‚ùÑÔ∏è'

        keyboard = [
            [
                InlineKeyboardButton("üëç", callback_data=f'like,{track_number}'),
                InlineKeyboardButton("üëé", callback_data=f'dislike,{track_number}'),
                InlineKeyboardButton("‚è©", callback_data='next_track')
            ],
            [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu')]
        ]
        query.edit_message_text(text=new_text, reply_markup=InlineKeyboardMarkup(keyboard))


def save_user_feedback(username, track_number, action, user_id):
    location = user_data[user_id]['location']
    activity = user_data[user_id]['activity']
    with open(DATA_FILE, 'a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([username, location, activity, track_number, action])


def main() -> None:
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dispatcher.add_handler(CallbackQueryHandler(button_callback))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()